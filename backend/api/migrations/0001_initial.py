# Generated by Django 5.2 on 2025-04-12 18:43

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The official name of the event.', max_length=200)),
                ('description', models.TextField(help_text='A detailed description of the event.')),
                ('event_type', models.CharField(choices=[('CONCERT', 'Concert'), ('MOVIE', 'Movie'), ('OTHER', 'Other')], default='OTHER', help_text='The genre of the event.', max_length=20)),
                ('date_time', models.DateTimeField(help_text='The date and time when the event was created.')),
                ('venue_name', models.CharField(help_text='The name of the venue or location.', max_length=150)),
                ('address', models.TextField(help_text='The full address of the venue.')),
                ('ticket_price', models.DecimalField(decimal_places=2, help_text='The price for one ticket to this event.', max_digits=8)),
                ('total_capacity', models.PositiveIntegerField(help_text='The maximum number of tickets available for this event.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the event was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the event was updated.')),
            ],
            options={
                'ordering': ['date_time'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_time', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the booking was made.')),
                ('status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Canceled')], default='CONFIRMED', help_text='The current status of the booking.', max_length=20)),
                ('user', models.ForeignKey(help_text='The user who booked this booking.', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='The event being booked.', on_delete=django.db.models.deletion.PROTECT, related_name='bookings', to='api.event')),
            ],
            options={
                'ordering': ['-booking_time'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_code', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier code for this specific ticket.', unique=True)),
                ('price_paid', models.DecimalField(decimal_places=2, help_text='The actual price paid for this specific ticket .', max_digits=8)),
                ('seat_info', models.CharField(blank=True, help_text="Specific seat assignment, if applicable (e.g., 'Section A, Row 5, Seat 12').", max_length=50, null=True)),
                ('issued_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this ticket was generated.')),
                ('booking', models.ForeignKey(help_text='The booking transaction this ticket belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='api.booking')),
                ('event', models.ForeignKey(help_text='The event this ticket grants access to.', on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='api.event')),
            ],
            options={
                'ordering': ['issued_at'],
            },
        ),
    ]
